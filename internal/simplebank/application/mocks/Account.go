// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	money "github.com/Rhymond/go-money"
	model "github.com/nohponex/clean-architecture/internal/simplebank/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// Account is an autogenerated mock type for the Account type
type Account struct {
	mock.Mock
}

// Balance provides a mock function with given fields: ctx, personID, accountID
func (_m *Account) Balance(ctx context.Context, personID model.PersonID, accountID model.AccountID) ([]money.Money, error) {
	ret := _m.Called(ctx, personID, accountID)

	var r0 []money.Money
	if rf, ok := ret.Get(0).(func(context.Context, model.PersonID, model.AccountID) []money.Money); ok {
		r0 = rf(ctx, personID, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]money.Money)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.PersonID, model.AccountID) error); ok {
		r1 = rf(ctx, personID, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields: ctx, personID, accountID
func (_m *Account) Open(ctx context.Context, personID model.PersonID, accountID model.AccountID) error {
	ret := _m.Called(ctx, personID, accountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PersonID, model.AccountID) error); ok {
		r0 = rf(ctx, personID, accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TopUp provides a mock function with given fields: ctx, personID, accountID, amount
func (_m *Account) TopUp(ctx context.Context, personID model.PersonID, accountID model.AccountID, amount money.Money) error {
	ret := _m.Called(ctx, personID, accountID, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PersonID, model.AccountID, money.Money) error); ok {
		r0 = rf(ctx, personID, accountID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Withdraw provides a mock function with given fields: ctx, personID, accountID, amount
func (_m *Account) Withdraw(ctx context.Context, personID model.PersonID, accountID model.AccountID, amount money.Money) error {
	ret := _m.Called(ctx, personID, accountID, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PersonID, model.AccountID, money.Money) error); ok {
		r0 = rf(ctx, personID, accountID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
